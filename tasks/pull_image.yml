
- set_fact:
    infofile_name: info.{{image_tag}}.{{startDate}}
    errorfile_name: error.{{image_tag}}.{{startDate}}

- name: pull image
  docker_image:
    name: "{{public_registry}}/{{image_name}}"
    tag: "{{image_tag}}"
    timeout: 300
  register: pull_result
  ignore_errors: True

- name: output pull msg
  debug: msg="{{pull_result}}"

- name: create dir of imagepull error
  file: path={{imagefile_path}}/imagepull state=directory

- name: create pull error file        
  template: src=../templates/image_pull_error.j2 dest={{imagefile_path}}/imagepull/{{errorfile_name}}
  when: pull_result| failed

- name: Inspect a single image
  docker_image_facts:
    name: "{{public_registry}}/{{image_name}}:{{image_tag}}"
  register: image_info

- block:
    - name: set image info fact
      set_fact:
        image_id: "{{image_info.images[0].Id}}"
        create_time: "{{image_info.images[0].Created}}"
    
    - name: create info file
      template: src=../templates/image_info.j2 dest={{imagefile_path}}/imagepull/{{infofile_name}}
  when: 
    - not pull_result| failed
    - image_info.images != []

- block:
    - name: tag image
      docker_image:
        name: "{{public_registry}}/{{image_name}}"
        repository: "{{local_registry}}/{{image_name}}"
        tag: "{{image_tag}}"
      register: tag_result
      ignore_errors: True
  
    - name: output tag result
      debug: msg="{{tag_result}}"

    - name: push image
      docker_image:
        name: "{{local_registry}}/{{image_name}}"
        tag: "{{image_tag}}"
        push: yes
        timeout: 300
      register: push_result
      ignore_errors: True
      when: not tag_result|failed
    
    - name: output push result
      debug: msg="{{push_result}}"
    
    - pause: seconds=10

    - name: create dir of imagepush file
      file: path={{imagefile_path}}/imagepush state=directory
      when: push_result|failed

    - name: create push error file        
      template: src=../templates/image_push_error.j2 dest={{imagefile_path}}/imagepush/{{errorfile_name}}
      when: push_result|failed

    - name: remove local registry image tag
      docker_image:
        state: absent
        name: "{{local_registry}}/{{image_name}}" 
        tag: "{{image_tag}}"
      ignore_errors: True
  when: 
    - use_network == "true"
    - not pull_result|failed

#not support now
#- block:
#    - name: create image tar dir
#      file: path=/tmp/imagetar/ state=directory
#
#    - name: Archive image
#      docker_image:
#        name: "{{public_registry}}/{{image_name}}"
#        tag: "{{image_tag}}"
#        archive_path: 
#  when: 
#    - use_network == "false"
#    - not pull_result|failed
